// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for photo file status
enum PhotoFileStatus {
  Source
  Offshoot
}

// Enum for blog type
enum BlogType {
  Article
  PhotoPost
}

// Enum for media type
enum MediaType {
  Photo
  PhotoFile
}

// Enum for user type
enum UserType {
  Admin
  Normal
  Pending
}

// User model
model User {
  id        String   @id @default(cuid())
  name      String
  password  String
  email     String   @unique
  address   String   @default("**PLACEHOLDER**")
  type      UserType @default(Pending)
  basePath  String   @default("**PLACEHOLDER**")
  cachePath String   @default("**PLACEHOLDER**")

  // Encryption keys
  publicKey  String
  privateKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos      Photo[]
  blogs       Blog[]
  sharedUsers SharedUser[]
}

// Photo model
model Photo {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  title             String
  description       String?
  liked             Boolean   @default(false)
  iso               Int?
  exposureTime      Float?
  exposureTimeValue String?
  fNumber           Float?
  cameraMake        String?
  cameraModel       String?
  lensMake          String?
  lensModel         String?
  focalLength       Float?
  focalLength35mm   Float?
  dateTaken         DateTime?
  timeZone          String?
  gpsLatitude       Float?
  gpsLongitude      Float?
  gpsTimestamp      DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  files PhotoFile[]
  tags  PhotoTag[]
}

// Photo file model
model PhotoFile {
  id               String          @id @default(cuid())
  photo            Photo           @relation(fields: [photoId], references: [id])
  photoId          String
  fileName         String
  fileType         String
  filePath         String          @unique
  fileHash         String
  fileSize         Int
  fileModifiedTime DateTime?
  fileAccessDate   DateTime?
  status           PhotoFileStatus @default(Source)
  imageHeight      Int
  imageWidth       Int
  orientation      Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Blog model
model Blog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  content   String
  blogType  BlogType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  blogMedia BlogMedia[]
  tags      BlogTag[]
}

// Blog media model
model BlogMedia {
  id            String    @id @default(cuid())
  blog          Blog      @relation(fields: [blogId], references: [id])
  blogId        String
  mediaType     MediaType
  mediaId       String
  mediaPosition Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Tag model
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos PhotoTag[]
  blogs  BlogTag[]
}

// Photo tag model
model PhotoTag {
  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([photoId, tagId])
}

// Blog tag model
model BlogTag {
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([blogId, tagId])
}

enum SharedUserStatus {
  Pending
  Active
  Blocked
}

enum SharedUserDirection {
  Incoming
  Outgoing
}

model SharedUser {
  id                String              @id @default(cuid())
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  comment           String
  sharedUserId      String
  sharedUserEmail   String
  sharedUserName    String
  sharedUserAddress String
  status            SharedUserStatus
  direction         SharedUserDirection

  // Encryption keys
  sharedUserTempSymmetricKey String
  sharedUserPublicKey        String

  // Token and session
  accessToken            String?
  accessTokenExpireTime  DateTime?
  session                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
