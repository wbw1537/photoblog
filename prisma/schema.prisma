// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for photo file status
enum PhotoFileStatus {
  Source
  Offshoot
}

// Enum for blog type
enum BlogType {
  Article
  PhotoPost
}

// Enum for media type
enum MediaType {
  Photo
  PhotoFile
}

// Enum for user type
enum UserType {
  Admin
  Normal
  Pending
  Remote
}

// Core user model (universal fields)
model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  type        UserType @default(Pending)
  instanceUrl String   @default("**PLACEHOLDER**")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  photos        Photo[]
  blogs         Blog[]
  localUser     LocalUser?
  remoteUser    RemoteUser?
  fromRelations UserRelationship[] @relation("FromUser")
  toRelations   UserRelationship[] @relation("ToUser")
  // followers     Follow[]           @relation("Following")
  // following     Follow[]           @relation("Follower")
}

// Local user specific data
model LocalUser {
  id         String @id @default(cuid())
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String @unique
  password   String
  basePath   String @default("**PLACEHOLDER**")
  cachePath  String @default("**PLACEHOLDER**")
  publicKey  String @db.VarChar(2048)
  privateKey String @db.VarChar(2048)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Photo model
model Photo {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  title             String
  description       String?
  liked             Boolean   @default(false)
  iso               Int?
  exposureTime      Float?
  exposureTimeValue String?
  fNumber           Float?
  cameraMake        String?
  cameraModel       String?
  lensMake          String?
  lensModel         String?
  focalLength       Float?
  focalLength35mm   Float?
  dateTaken         DateTime?
  timeZone          String?
  gpsLatitude       Float?
  gpsLongitude      Float?
  gpsTimestamp      DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  files PhotoFile[]
  tags  PhotoTag[]
}

// Photo file model
model PhotoFile {
  id               String          @id @default(cuid())
  photo            Photo           @relation(fields: [photoId], references: [id])
  photoId          String
  fileName         String
  fileType         String
  filePath         String          @unique
  fileHash         String
  fileSize         Int
  fileModifiedTime DateTime?
  fileAccessDate   DateTime?
  status           PhotoFileStatus @default(Source)
  imageHeight      Int
  imageWidth       Int
  orientation      Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Blog model
model Blog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  content   String   @db.Text
  blogType  BlogType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  blogMedia BlogMedia[]
  tags      BlogTag[]
}

// Blog media model
model BlogMedia {
  id            String    @id @default(cuid())
  blog          Blog      @relation(fields: [blogId], references: [id])
  blogId        String
  mediaType     MediaType
  mediaId       String
  mediaPosition Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Tag model
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos PhotoTag[]
  blogs  BlogTag[]
}

// Photo tag model
model PhotoTag {
  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([photoId, tagId])
}

// Blog tag model
model BlogTag {
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([blogId, tagId])
}

// Remote user federation data
model RemoteUser {
  id                   String    @id @default(cuid())
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String    @unique
  instanceUrl          String
  publicKey            String?   @db.VarChar(2048)
  tempSymmetricKey     String?   @db.VarChar(2048)
  accessToken          String?   @db.VarChar(2048)
  accessTokenExpireTime DateTime?
  session              String?   @db.VarChar(2048)
  status               RemoteUserStatus @default(Pending)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// Enums for user relationships
enum RemoteUserStatus {
  Pending
  Active
  Blocked
}

enum RelationshipType {
  Share  // Private, encrypted sharing with approval
  Block  // Block private access
}

enum RelationshipStatus {
  Pending
  Active
  Blocked
}

// Private sharing relationships (requires approval & encryption)
model UserRelationship {
  id               String             @id @default(cuid())
  fromUser         User               @relation("FromUser", fields: [fromUserId], references: [id])
  fromUserId       String
  toUser           User               @relation("ToUser", fields: [toUserId], references: [id])
  toUserId         String
  relationshipType RelationshipType
  status           RelationshipStatus @default(Pending)
  permissions      Json?              // What can be shared privately
  comment          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([fromUserId, toUserId])
}

// Public follow relationships (like RSS subscription - no approval needed)
// model Follow {
//   id          String   @id @default(cuid())
//   follower    User     @relation("Follower", fields: [followerId], references: [id])
//   followerId  String
//   following   User     @relation("Following", fields: [followingId], references: [id])
//   followingId String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@unique([followerId, followingId])
// }
